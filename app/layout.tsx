// Import global CSS styles
import './globals.css';

// Import necessary dependencies and components
import type { Metadata } from 'next';
import { storyblokInit, apiPlugin } from '@storyblok/react/rsc';
import StoryblokProvider from '@/components/StoryblokProvider';
import { getStoryblokApi } from '@storyblok/react/rsc';
import { Josefin_Sans, Poppins } from 'next/font/google';
import { Analytics } from '@vercel/analytics/react';
import { SpeedInsights } from '@vercel/speed-insights/next';

// If loading a variable font, you don't need to specify the font weight
const poppins = Poppins({
  weight: ['300', '400', '500', '600', '700'],
  subsets: ['latin'],
  variable: '--font-poppins-sans',
});

import Header from '@/components/Header';
import Footer from '@/components/Footer';

// Initialize Storyblok with required settings
storyblokInit({
  accessToken: process.env.NEXT_PUBLIC_STORYBLOK_TOKEN, // Access token for Storyblok API
  use: [apiPlugin], // Use the Storyblok API plugin
  apiOptions: {
    region: 'us', // Specify the API region as "us"
  },
});

// Define metadata for the page
export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

// Define the RootLayout component
export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  let { data } = await fetchConfigData();

  return (
    <StoryblokProvider>
      <html lang='en'>
        <body
          className={`${poppins.variable} flex min-h-screen flex-col bg-white font-sans text-base md:text-lg`}
          suppressHydrationWarning={true}
        >
          {/* Include the Header component */}
          <Header menu={data?.story?.content} />
          {/* Render the children components */}
          {children}
          <SpeedInsights />
          {/* Include the Footer component */}
          <Footer blok={data?.story?.content} />
          <Analytics />
        </body>
      </html>
    </StoryblokProvider>
  );
}

// get configuation data
const fetchConfigData = async () => {
  // Get an instance of the Storyblok API
  const storyblokApi = getStoryblokApi();

  // Fetch the 'config' story data from the 'draft' version
  return storyblokApi.get(`cdn/stories/config`, { version: 'draft' });
};
